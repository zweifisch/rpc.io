// Generated by CoffeeScript 1.7.1
(function() {
  var expect, rpcio, socket;

  mocha.setup('bdd');

  expect = chai.expect;

  rpcio = require('rpc.io-client');

  socket = rpcio(800);

  describe('client', function() {
    it('should support callback', function(done) {
      return socket.call('add', {
        n1: 1,
        n2: 9
      }, function(err, result) {
        expect(result).to.equal(10);
        return done();
      });
    });
    it('should return an promise', function(done) {
      var result;
      result = socket.call('add', {
        n1: 2,
        n2: 7
      });
      return result.then(function(value) {
        expect(value).to.equal(9);
        return done();
      });
    });
    return it('should time out', function(done) {
      var result;
      result = socket.call('sleep', {
        time: 1000
      });
      result.then(function(value) {
        return done(new Error('failed to time out'));
      });
      return result["catch"](function(err) {
        expect(err).to.equal('timeout');
        return done();
      });
    });
  });

  describe('server', function() {
    it('should wake up on time', function(done) {
      var result;
      result = socket.call('sleep', {
        time: 500
      });
      result.then(function(value) {
        return done();
      });
      return result["catch"](function(err) {
        return done(new Error('failed to wakeup'));
      });
    });
    it('should catch exceptions', function(done) {
      var result;
      result = socket.call('error', {
        msg: 'foo'
      });
      result.then(function(value) {
        return done(new Error('failed to cache exception'));
      });
      return result["catch"](function(err) {
        expect(err).to.equal('foo');
        return done();
      });
    });
    it('should fail on unregistered method', function(done) {
      var result;
      result = socket.call('foo', {
        foo: 'bar'
      });
      return result["catch"](function(err) {
        return done();
      });
    });
    it('should complain when param missing', function(done) {
      var result;
      result = socket.call('add', {
        n1: 10
      });
      return result["catch"](function(err) {
        return done();
      });
    });
    it('should support optional params', function(done) {
      var result;
      result = socket.call('optional', {
        foo: 'bar'
      });
      result.then(function(value) {
        expect(value).to.deep.equal({
          foo: 'bar',
          bar: 'foo'
        });
        return done();
      });
      return result["catch"](function(err) {
        return done(new Error(err));
      });
    });
    return it('should support namespace', function(done) {
      var result;
      result = socket.call('ns.ping');
      result.then(function(value) {
        expect(value).to.equal('pong');
        return done();
      });
      return result["catch"](function(err) {
        return done(new Error(err));
      });
    });
  });

  mocha.run();

}).call(this);
