// Generated by CoffeeScript 1.7.1
(function() {
  var getSignature,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  getSignature = function(fn) {
    var params;
    params = /\(([\s\S]*?)\)/.exec(fn);
    if (params && params[1].trim()) {
      return params[1].split(',').map(function(x) {
        return x.trim();
      });
    } else {
      return [];
    }
  };

  module.exports = function(socket) {
    var closures, defaults, rpchandler, signatures;
    closures = {};
    signatures = {};
    defaults = {};
    socket.register = function() {
      var args, closure, method, methods, namespace, _defaults, _results;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length === 1) {
        namespace = args[0];
        return socket.register;
      } else if (args.length === 2) {
        if ('function' === typeof args[1]) {
          method = args[0], closure = args[1];
          return closures[method] = closure;
        } else {
          namespace = args[0], methods = args[1];
          if ('object' !== typeof methods) {
            throw Error("unexpected params");
          }
          _results = [];
          for (method in methods) {
            if (!__hasProp.call(methods, method)) continue;
            closure = methods[method];
            closures["" + namespace + "." + method] = closure;
            if (methods["" + method + "_defaults"]) {
              _results.push(defaults["" + namespace + "." + method] = methods["" + method + "_defaults"]);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      } else if (args.length === 3) {
        method = args[0], _defaults = args[1], closure = args[2];
        closures[method] = closure;
        return defaults[method] = _defaults;
      }
    };
    rpchandler = function(method, params) {
      var name, preparedParams, value, _i, _len, _ref;
      if ('object' !== typeof params) {
        throw new Error('params must be passed as an object');
      }
      if (!(method in closures)) {
        throw new Error("method not registered: " + method);
      }
      if (__indexOf.call(signatures, method) < 0) {
        signatures[method] = getSignature(closures[method]);
      }
      preparedParams = [];
      for (name in params) {
        if (!__hasProp.call(params, name)) continue;
        value = params[name];
        if (__indexOf.call(signatures[method], name) < 0) {
          throw new Error("unexpected param: " + name);
        }
      }
      _ref = signatures[method];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (!(name in params)) {
          if (defaults[method] && name in defaults[method]) {
            preparedParams.push(defaults[method][name]);
          } else {
            throw new Error("param missing: " + name);
          }
        } else {
          preparedParams.push(params[name]);
        }
      }
      return closures[method].apply(closures, preparedParams);
    };
    socket.onrpc = function(handler) {
      return rpchandler = handler;
    };
    socket.on('rpc-call', function(id, method, params) {
      var e, result;
      try {
        result = rpchandler(method, params, id);
        if ('function' === typeof (result != null ? result.then : void 0)) {
          result.then(function(value) {
            return socket.emit('rpc-result', id, value);
          });
          return result["catch"](function(err) {
            return socket.emit('rpc-result', id, null, err);
          });
        } else {
          return socket.emit('rpc-result', id, result);
        }
      } catch (_error) {
        e = _error;
        return socket.emit('rpc-result', id, null, e.message);
      }
    });
    return socket;
  };

}).call(this);
